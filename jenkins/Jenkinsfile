pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'alejomunoz'
        KUBERNETES_NAMESPACE = 'ecommerce-microservices'
        MAVEN_OPTS = '-Xmx1024m'
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build & Test') {
            parallel {
                stage('Build User Service') {
                    steps {
                        dir('user-service') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
                stage('Build Product Service') {
                    steps {
                        dir('product-service') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
                stage('Build Order Service') {
                    steps {
                        dir('order-service') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
                stage('Build Payment Service') {
                    steps {
                        dir('payment-service') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
                stage('Build Favourite Service') {
                    steps {
                        dir('favourite-service') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
                stage('Build Proxy Client') {
                    steps {
                        dir('proxy-client') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
            }
        }
        
        stage('Docker Build') {
            parallel {
                stage('Build User Service Image') {
                    steps {
                        dir('user-service') {
                            script {
                                def image = docker.build("${DOCKER_REGISTRY}/user-service-ecommerce-boot:${env.BUILD_NUMBER}")
                                docker.withRegistry('', 'docker-hub-credentials') {
                                    image.push()
                                    image.push('latest')
                                }
                            }
                        }
                    }
                }
                stage('Build Product Service Image') {
                    steps {
                        dir('product-service') {
                            script {
                                def image = docker.build("${DOCKER_REGISTRY}/product-service-ecommerce-boot:${env.BUILD_NUMBER}")
                                docker.withRegistry('', 'docker-hub-credentials') {
                                    image.push()
                                    image.push('latest')
                                }
                            }
                        }
                    }
                }
                stage('Build Order Service Image') {
                    steps {
                        dir('order-service') {
                            script {
                                def image = docker.build("${DOCKER_REGISTRY}/order-service-ecommerce-boot:${env.BUILD_NUMBER}")
                                docker.withRegistry('', 'docker-hub-credentials') {
                                    image.push()
                                    image.push('latest')
                                }
                            }
                        }
                    }
                }
                stage('Build Payment Service Image') {
                    steps {
                        dir('payment-service') {
                            script {
                                def image = docker.build("${DOCKER_REGISTRY}/payment-service-ecommerce-boot:${env.BUILD_NUMBER}")
                                docker.withRegistry('', 'docker-hub-credentials') {
                                    image.push()
                                    image.push('latest')
                                }
                            }
                        }
                    }
                }
                stage('Build Favourite Service Image') {
                    steps {
                        dir('favourite-service') {
                            script {
                                def image = docker.build("${DOCKER_REGISTRY}/favourite-service-ecommerce-boot:${env.BUILD_NUMBER}")
                                docker.withRegistry('', 'docker-hub-credentials') {
                                    image.push()
                                    image.push('latest')
                                }
                            }
                        }
                    }
                }
                stage('Build Proxy Client Image') {
                    steps {
                        dir('proxy-client') {
                            script {
                                def image = docker.build("${DOCKER_REGISTRY}/proxy-client-ecommerce-boot:${env.BUILD_NUMBER}")
                                docker.withRegistry('', 'docker-hub-credentials') {
                                    image.push()
                                    image.push('latest')
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}